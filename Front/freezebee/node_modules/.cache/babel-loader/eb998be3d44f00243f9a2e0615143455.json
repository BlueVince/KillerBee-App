{"ast":null,"code":"const encryption = require('../encryption/encryption');\n\nconst encryptionClient = encryption.client;\nmodule.exports = {\n  /**\r\n   * Create a connection with the API\r\n   * @param {String} ip API's IP address\r\n   * @param {String} url path to fetch from\r\n   * @param {function} callback (Object: err, Object: result) the function to callback\r\n   */\n  CreateConnection: function (ip, path, callback) {\n    try {\n      encryptionClient.InitiateConnection(ip, (err, result) => {\n        if (!err) {\n          fetch(\"http://\" + ip + path, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify(result)\n          }).then(res => res.json()).then(result => {\n            encryptionClient.ConnectionAccepted(ip, result.publicKey, (err, result) => {\n              if (!err) callback(false, result);else callback(err, null);\n            });\n          }, error => {\n            callback(error, null);\n          });\n        } else callback(err, null);\n      });\n    } catch (error) {\n      callback(error, null);\n    }\n  },\n\n  /**\r\n   * Create a connection with the API\r\n   * @param {String} ip API's IP address\r\n   * @param {String} url path to fetch from\r\n   * @param {Object} data The data to send in the body of the fetch request\r\n   * @param {function} callback (Object: err, Object: result) the function to callback\r\n   */\n  FetchAPI: function (ip, path, data, callback) {\n    try {\n      encryptionClient.EncryptForSending(ip, JSON.stringify(data), (err, result) => {\n        if (!err) {\n          console.log(data);\n          console.log(result);\n          fetch(\"http://\" + ip + path, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify(result)\n          }).then(res => res.json()).then(result => {\n            encryptionClient.DecryptReceived(ip, result, (err, result) => {\n              if (!err) callback(false, JSON.parse(result));else callback(err, null);\n            });\n          }, error => {\n            callback(error, null);\n          });\n        } else {\n          console.log(err);\n          callback(err, null);\n        }\n      });\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/vince/OneDrive/Documents/A5 - Option 1/cybersecurite/freezebee/src/encryption/fetching.js"],"names":["encryption","require","encryptionClient","client","module","exports","CreateConnection","ip","path","callback","InitiateConnection","err","result","fetch","method","headers","body","JSON","stringify","then","res","json","ConnectionAccepted","publicKey","error","FetchAPI","data","EncryptForSending","console","log","DecryptReceived","parse"],"mappings":"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","sourcesContent":["const encryption = require('../encryption/encryption');\r\nconst encryptionClient = encryption.client;\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Create a connection with the API\r\n     * @param {String} ip API's IP address\r\n     * @param {String} url path to fetch from\r\n     * @param {function} callback (Object: err, Object: result) the function to callback\r\n     */\r\n    CreateConnection: function (ip, path, callback) {\r\n        try {\r\n            encryptionClient.InitiateConnection(ip, (err, result) => {\r\n                if (!err) {\r\n                    fetch(\"http://\" + ip + path, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Accept': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(result),\r\n                    }\r\n                    ).then(res => res.json())\r\n                        .then(\r\n                            (result) => {\r\n                                encryptionClient.ConnectionAccepted(ip, result.publicKey, (err, result) => {\r\n                                    if (!err) callback(false, result);\r\n                                    else callback(err, null);\r\n                                });\r\n                            },\r\n                            (error) => {\r\n                                callback(error, null);\r\n                            }\r\n                        );\r\n                }\r\n                else callback(err, null);\r\n            });\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Create a connection with the API\r\n     * @param {String} ip API's IP address\r\n     * @param {String} url path to fetch from\r\n     * @param {Object} data The data to send in the body of the fetch request\r\n     * @param {function} callback (Object: err, Object: result) the function to callback\r\n     */\r\n    FetchAPI: function (ip, path, data, callback) {\r\n        try {\r\n            encryptionClient.EncryptForSending(ip, JSON.stringify(data), (err, result) => {\r\n                if (!err) {\r\n                    console.log(data);\r\n                    console.log(result);\r\n                    fetch(\"http://\" + ip + path, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Accept': 'application/json',\r\n                        },\r\n                        body: JSON.stringify(result),\r\n                    }\r\n                    ).then(res => res.json())\r\n                        .then(\r\n                            (result) => {\r\n                                encryptionClient.DecryptReceived(ip, result, (err, result) => {\r\n                                    if (!err) callback(false, JSON.parse(result));\r\n                                    else callback(err, null);\r\n                                });\r\n                            },\r\n                            (error) => {\r\n                                callback(error, null);\r\n                            }\r\n                        );\r\n                }\r\n                else {\r\n                    console.log(err);\r\n                    callback(err, null);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}