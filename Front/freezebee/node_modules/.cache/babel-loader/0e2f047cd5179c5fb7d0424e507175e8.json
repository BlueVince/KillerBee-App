{"ast":null,"code":"const publicIp = require('public-ip').publicIp;\n\nconst encryption = require('../encryption/encryption');\n\nconst encryptionClient = encryption.client;\nmodule.exports = {\n  /**\r\n   * Create a connection with the API\r\n   * @param {String} apiIP API's IP address\r\n   * @param {String} url path to fetch from\r\n   * @param {function} callback (Object: err, Object: result) the function to callback\r\n   */\n  CreateConnection: async function (apiIP, path, callback) {\n    try {\n      encryptionClient.InitiateConnection(async (err, result) => {\n        if (!err) {\n          result.ip = await publicIp.v4();\n          console.log(result.ip);\n          fetch(\"http://\" + apiIP + path, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify(result)\n          }).then(res => res.json()).then(result => {\n            encryptionClient.ConnectionAccepted(result.publicKey, (err, result) => {\n              if (!err) callback(false, result);else callback(err, null);\n            });\n          }, error => {\n            callback(error, null);\n          });\n        } else callback(err, null);\n      });\n    } catch (error) {\n      callback(error, null);\n    }\n  },\n\n  /**\r\n   * Create a connection with the API\r\n   * @param {String} apiIP API's IP address\r\n   * @param {String} url path to fetch from\r\n   * @param {Object} data The data to send in the body of the fetch request\r\n   * @param {function} callback (Object: err, Object: result) the function to callback\r\n   */\n  FetchAPI: async function (apiIP, path, data, callback) {\n    try {\n      data.ip = await publicIp.v4();\n      encryptionClient.EncryptForSending(JSON.stringify(data), (err, result) => {\n        if (!err) {\n          fetch(\"http://\" + apiIP + path, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify(result)\n          }).then(res => res.json()).then(result => {\n            if (!result.error) {\n              encryptionClient.DecryptReceived(result, (err, result) => {\n                if (!err) callback(false, JSON.parse(result));else callback(err, null);\n              });\n            } else callback(result.error, null);\n          }, error => {\n            callback(error, null);\n          });\n        } else callback(err, null);\n      });\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/vince/OneDrive/Documents/A5 - Option 1/cybersecurite/freezebee/src/encryption/fetching.js"],"names":["publicIp","require","encryption","encryptionClient","client","module","exports","CreateConnection","apiIP","path","callback","InitiateConnection","err","result","ip","v4","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","ConnectionAccepted","publicKey","error","FetchAPI","data","EncryptForSending","DecryptReceived","parse"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,QAAtC;;AACA,MAAME,UAAU,GAAGD,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAME,gBAAgB,GAAGD,UAAU,CAACE,MAApC;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,gBAAgB,EAAE,gBAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AACrD,QAAI;AACAP,MAAAA,gBAAgB,CAACQ,kBAAjB,CAAqC,OAAOC,GAAP,EAAYC,MAAZ,KAAuB;AACxD,YAAI,CAACD,GAAL,EAAU;AACNC,UAAAA,MAAM,CAACC,EAAP,GAAY,MAAMd,QAAQ,CAACe,EAAT,EAAlB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACC,EAAnB;AACAI,UAAAA,KAAK,CAAC,YAAYV,KAAZ,GAAoBC,IAArB,EAA2B;AAC5BU,YAAAA,MAAM,EAAE,MADoB;AAE5BC,YAAAA,OAAO,EAAE;AACL,8BAAgB,kBADX;AAEL,wBAAU;AAFL,aAFmB;AAM5BC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,MAAf;AANsB,WAA3B,CAAL,CAOGW,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQKF,IARL,CASSX,MAAD,IAAY;AACRV,YAAAA,gBAAgB,CAACwB,kBAAjB,CAAoCd,MAAM,CAACe,SAA3C,EAAsD,CAAChB,GAAD,EAAMC,MAAN,KAAiB;AACnE,kBAAI,CAACD,GAAL,EAAUF,QAAQ,CAAC,KAAD,EAAQG,MAAR,CAAR,CAAV,KACKH,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACR,aAHD;AAIH,WAdT,EAeSiB,KAAD,IAAW;AACPnB,YAAAA,QAAQ,CAACmB,KAAD,EAAQ,IAAR,CAAR;AACH,WAjBT;AAmBH,SAtBD,MAuBKnB,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACR,OAzBD;AA0BH,KA3BD,CA2BE,OAAOiB,KAAP,EAAc;AACZnB,MAAAA,QAAQ,CAACmB,KAAD,EAAQ,IAAR,CAAR;AACH;AACJ,GAtCY;;AAwCb;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,QAAQ,EAAE,gBAAgBtB,KAAhB,EAAuBC,IAAvB,EAA6BsB,IAA7B,EAAmCrB,QAAnC,EAA6C;AACnD,QAAI;AACAqB,MAAAA,IAAI,CAACjB,EAAL,GAAU,MAAMd,QAAQ,CAACe,EAAT,EAAhB;AACAZ,MAAAA,gBAAgB,CAAC6B,iBAAjB,CAAmCV,IAAI,CAACC,SAAL,CAAeQ,IAAf,CAAnC,EAAyD,CAACnB,GAAD,EAAMC,MAAN,KAAiB;AACtE,YAAI,CAACD,GAAL,EAAU;AACNM,UAAAA,KAAK,CAAC,YAAYV,KAAZ,GAAoBC,IAArB,EAA2B;AAC5BU,YAAAA,MAAM,EAAE,MADoB;AAE5BC,YAAAA,OAAO,EAAE;AACL,8BAAgB,kBADX;AAEL,wBAAU;AAFL,aAFmB;AAM5BC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,MAAf;AANsB,WAA3B,CAAL,CAOGW,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQKF,IARL,CASSX,MAAD,IAAY;AACR,gBAAI,CAACA,MAAM,CAACgB,KAAZ,EAAmB;AACf1B,cAAAA,gBAAgB,CAAC8B,eAAjB,CAAiCpB,MAAjC,EAAyC,CAACD,GAAD,EAAMC,MAAN,KAAiB;AACtD,oBAAI,CAACD,GAAL,EAAUF,QAAQ,CAAC,KAAD,EAAQY,IAAI,CAACY,KAAL,CAAWrB,MAAX,CAAR,CAAR,CAAV,KACKH,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACR,eAHD;AAIH,aALD,MAKOF,QAAQ,CAACG,MAAM,CAACgB,KAAR,EAAe,IAAf,CAAR;AACV,WAhBT,EAiBSA,KAAD,IAAW;AACPnB,YAAAA,QAAQ,CAACmB,KAAD,EAAQ,IAAR,CAAR;AACH,WAnBT;AAqBH,SAtBD,MAuBKnB,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACR,OAzBD;AA0BH,KA5BD,CA4BE,OAAOiB,KAAP,EAAc;AACZnB,MAAAA,QAAQ,CAACmB,KAAD,EAAQ,IAAR,CAAR;AACH;AACJ;AA/EY,CAAjB","sourcesContent":["const publicIp = require('public-ip').publicIp;\r\nconst encryption = require('../encryption/encryption');\r\nconst encryptionClient = encryption.client;\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Create a connection with the API\r\n     * @param {String} apiIP API's IP address\r\n     * @param {String} url path to fetch from\r\n     * @param {function} callback (Object: err, Object: result) the function to callback\r\n     */\r\n    CreateConnection: async function (apiIP, path, callback) {\r\n        try {\r\n            encryptionClient.InitiateConnection( async (err, result) => {\r\n                if (!err) {\r\n                    result.ip = await publicIp.v4();\r\n                    console.log(result.ip);\r\n                    fetch(\"http://\" + apiIP + path, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Accept': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(result),\r\n                    }).then(res => res.json())\r\n                        .then(\r\n                            (result) => {\r\n                                encryptionClient.ConnectionAccepted(result.publicKey, (err, result) => {\r\n                                    if (!err) callback(false, result);\r\n                                    else callback(err, null);\r\n                                });\r\n                            },\r\n                            (error) => {\r\n                                callback(error, null);\r\n                            }\r\n                        );\r\n                }\r\n                else callback(err, null);\r\n            });\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Create a connection with the API\r\n     * @param {String} apiIP API's IP address\r\n     * @param {String} url path to fetch from\r\n     * @param {Object} data The data to send in the body of the fetch request\r\n     * @param {function} callback (Object: err, Object: result) the function to callback\r\n     */\r\n    FetchAPI: async function (apiIP, path, data, callback) {\r\n        try {\r\n            data.ip = await publicIp.v4();\r\n            encryptionClient.EncryptForSending(JSON.stringify(data), (err, result) => {\r\n                if (!err) {\r\n                    fetch(\"http://\" + apiIP + path, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Accept': 'application/json',\r\n                        },\r\n                        body: JSON.stringify(result),\r\n                    }).then(res => res.json())\r\n                        .then(\r\n                            (result) => {\r\n                                if (!result.error) {\r\n                                    encryptionClient.DecryptReceived(result, (err, result) => {\r\n                                        if (!err) callback(false, JSON.parse(result));\r\n                                        else callback(err, null);\r\n                                    });\r\n                                } else callback(result.error, null);\r\n                            },\r\n                            (error) => {\r\n                                callback(error, null);\r\n                            }\r\n                        );\r\n                }\r\n                else callback(err, null);\r\n            });\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}