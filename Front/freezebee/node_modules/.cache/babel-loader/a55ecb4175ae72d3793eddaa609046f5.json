{"ast":null,"code":"const encryption = require('../encryption/encryption');\n\nconst encryptionClient = encryption.client;\nmodule.exports = {\n  /**\r\n   * Create a connection with the API\r\n   * @param {String} ip API's IP address\r\n   * @param {String} url path to fetch from\r\n   * @param {function} callback (Object: err, Object: result) the function to callback\r\n   */\n  CreateConnection: function (ip, path, callback) {\n    try {\n      encryptionClient.InitiateConnection(ip, (err, result) => {\n        // TODO, fetch \"ip + path\"\n        fetch(\"http://\" + ip + path, {\n          // TODO, post verb\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          method: 'get'\n        }).then(res => res.json()).then(result => {\n          encryptionClient.ConnectionAccepted(ip, result.publicKey, (err, result) => {\n            if (!err) callback(false, result);else callback(err, null);\n          });\n        }, error => {\n          callback(error, null);\n        });\n      });\n    } catch (error) {\n      callback(error, null);\n    }\n  },\n\n  /**\r\n   * Create a connection with the API\r\n   * @param {String} ip API's IP address\r\n   * @param {String} url path to fetch from\r\n   * @param {Object} data The data to send in the body of the fetch request\r\n   * @param {function} callback (Object: err, Object: result) the function to callback\r\n   */\n  FetchAPI: function (ip, path, data, callback) {\n    try {\n      encryptionClient.EncryptForSending(ip, JSON.stringify(data), (err, result) => {\n        // TODO, fetch \"ip + path\"\n        fetch(\"http://\" + ip + path, {\n          // TODO, post verb\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          method: 'post',\n          body: data\n        }).then(res => res.json()).then(result => {\n          encryptionClient.DecryptReceived(ip, result, (err, result) => {\n            if (!err) callback(false, JSON.parse(result));else callback(err, null);\n          });\n        }, error => {\n          callback(error, null);\n        });\n      });\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/vince/OneDrive/Documents/A5 - Option 1/cybersecurite/freezebee/src/encryption/fetching.js"],"names":["encryption","require","encryptionClient","client","module","exports","CreateConnection","ip","path","callback","InitiateConnection","err","result","fetch","headers","method","then","res","json","ConnectionAccepted","publicKey","error","FetchAPI","data","EncryptForSending","JSON","stringify","body","DecryptReceived","parse"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAMC,gBAAgB,GAAGF,UAAU,CAACG,MAApC;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,gBAAgB,EAAE,UAAUC,EAAV,EAAcC,IAAd,EAAoBC,QAApB,EAA8B;AAC5C,QAAI;AACAP,MAAAA,gBAAgB,CAACQ,kBAAjB,CAAoCH,EAApC,EAAwC,CAACI,GAAD,EAAMC,MAAN,KAAiB;AACrD;AACAC,QAAAA,KAAK,CAAC,YAAYN,EAAZ,GAAiBC,IAAlB,EAAwB;AACzB;AACAM,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAEL,sBAAU;AAFL,WAFgB;AAMzBC,UAAAA,MAAM,EAAE;AANiB,SAAxB,CAAL,CAQEC,IARF,CAQOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARd,EASKF,IATL,CAUSJ,MAAD,IAAY;AACRV,UAAAA,gBAAgB,CAACiB,kBAAjB,CAAoCZ,EAApC,EAAwCK,MAAM,CAACQ,SAA/C,EAA0D,CAACT,GAAD,EAAMC,MAAN,KAAiB;AACvE,gBAAI,CAACD,GAAL,EAAUF,QAAQ,CAAC,KAAD,EAAQG,MAAR,CAAR,CAAV,KACKH,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACR,WAHD;AAIH,SAfT,EAgBSU,KAAD,IAAW;AACPZ,UAAAA,QAAQ,CAACY,KAAD,EAAQ,IAAR,CAAR;AACH,SAlBT;AAoBH,OAtBD;AAuBH,KAxBD,CAwBE,OAAOA,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CAACY,KAAD,EAAQ,IAAR,CAAR;AACH;AACJ,GAnCY;;AAqCb;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,QAAQ,EAAE,UAAUf,EAAV,EAAcC,IAAd,EAAoBe,IAApB,EAA0Bd,QAA1B,EAAoC;AAC1C,QAAI;AACAP,MAAAA,gBAAgB,CAACsB,iBAAjB,CAAmCjB,EAAnC,EAAuCkB,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAvC,EAA6D,CAACZ,GAAD,EAAMC,MAAN,KAAiB;AAC1E;AACAC,QAAAA,KAAK,CAAC,YAAYN,EAAZ,GAAiBC,IAAlB,EAAwB;AACzB;AACAM,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAEL,sBAAU;AAFL,WAFgB;AAMzBC,UAAAA,MAAM,EAAE,MANiB;AAOzBY,UAAAA,IAAI,EAAEJ;AAPmB,SAAxB,CAAL,CASEP,IATF,CASOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATd,EAUKF,IAVL,CAWSJ,MAAD,IAAY;AACRV,UAAAA,gBAAgB,CAAC0B,eAAjB,CAAiCrB,EAAjC,EAAqCK,MAArC,EAA6C,CAACD,GAAD,EAAMC,MAAN,KAAiB;AAC1D,gBAAI,CAACD,GAAL,EAAUF,QAAQ,CAAC,KAAD,EAAQgB,IAAI,CAACI,KAAL,CAAWjB,MAAX,CAAR,CAAR,CAAV,KACKH,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACR,WAHD;AAIH,SAhBT,EAiBSU,KAAD,IAAW;AACPZ,UAAAA,QAAQ,CAACY,KAAD,EAAQ,IAAR,CAAR;AACH,SAnBT;AAqBH,OAvBD;AAwBH,KAzBD,CAyBE,OAAOA,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CAACY,KAAD,EAAQ,IAAR,CAAR;AACH;AACJ;AAzEY,CAAjB","sourcesContent":["const encryption = require('../encryption/encryption');\r\nconst encryptionClient = encryption.client;\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Create a connection with the API\r\n     * @param {String} ip API's IP address\r\n     * @param {String} url path to fetch from\r\n     * @param {function} callback (Object: err, Object: result) the function to callback\r\n     */\r\n    CreateConnection: function (ip, path, callback) {\r\n        try {\r\n            encryptionClient.InitiateConnection(ip, (err, result) => {\r\n                // TODO, fetch \"ip + path\"\r\n                fetch(\"http://\" + ip + path, {\r\n                    // TODO, post verb\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Accept': 'application/json'\r\n                    },\r\n                    method: 'get',\r\n                }\r\n                ).then(res => res.json())\r\n                    .then(\r\n                        (result) => {\r\n                            encryptionClient.ConnectionAccepted(ip, result.publicKey, (err, result) => {\r\n                                if (!err) callback(false, result);\r\n                                else callback(err, null);\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            callback(error, null);\r\n                        }\r\n                    )\r\n            });\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Create a connection with the API\r\n     * @param {String} ip API's IP address\r\n     * @param {String} url path to fetch from\r\n     * @param {Object} data The data to send in the body of the fetch request\r\n     * @param {function} callback (Object: err, Object: result) the function to callback\r\n     */\r\n    FetchAPI: function (ip, path, data, callback) {\r\n        try {\r\n            encryptionClient.EncryptForSending(ip, JSON.stringify(data), (err, result) => {\r\n                // TODO, fetch \"ip + path\"\r\n                fetch(\"http://\" + ip + path, {\r\n                    // TODO, post verb\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Accept': 'application/json',\r\n                    },\r\n                    method: 'post',\r\n                    body: data\r\n                }\r\n                ).then(res => res.json())\r\n                    .then(\r\n                        (result) => {\r\n                            encryptionClient.DecryptReceived(ip, result, (err, result) => {\r\n                                if (!err) callback(false, JSON.parse(result));\r\n                                else callback(err, null);\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            callback(error, null);\r\n                        }\r\n                    )\r\n            });\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}