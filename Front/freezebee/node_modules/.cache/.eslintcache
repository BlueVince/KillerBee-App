[{"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\index.js":"1","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\reportWebVitals.js":"2","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\App.js":"3","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\encryption\\fetching.js":"4","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\homePage.js":"5","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\modelPage\\ModelForm.js":"6","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\procedePage\\ProcedeForm.js":"7","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\ingredientPage\\IngredientForm.js":"8","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\stepPage\\StepForm.js":"9","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\testPage\\TestForm.js":"10","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\encryption\\encryption.js":"11","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\ingredientPage\\IngredientToModelForm.js":"12","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\loginPage.js":"13","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\stepPage\\StepToProcede.js":"14"},{"size":592,"mtime":1632838195911,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":3495,"mtime":1633354738061,"results":"18","hashOfConfig":"16"},{"size":3567,"mtime":1633347737882,"results":"19","hashOfConfig":"16"},{"size":477,"mtime":1632929013445,"results":"20","hashOfConfig":"16"},{"size":5564,"mtime":1633352294418,"results":"21","hashOfConfig":"16"},{"size":5184,"mtime":1633354689570,"results":"22","hashOfConfig":"16"},{"size":4387,"mtime":1633354716285,"results":"23","hashOfConfig":"16"},{"size":4277,"mtime":1633354693161,"results":"24","hashOfConfig":"16"},{"size":5687,"mtime":1633354698987,"results":"25","hashOfConfig":"16"},{"size":10216,"mtime":1633350114948,"results":"26","hashOfConfig":"16"},{"size":4679,"mtime":1633354802195,"results":"27","hashOfConfig":"16"},{"size":3841,"mtime":1633354676258,"results":"28","hashOfConfig":"16"},{"size":4569,"mtime":1633354807416,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"c8mwvd",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\index.js",[],["67","68"],"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\reportWebVitals.js",[],"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\App.js",["69","70","71","72"],"import './App.css';\nimport React, {Component} from 'react';\nimport IngredientForm from './pages/ingredientPage/IngredientForm';\nimport HomePage from './pages/homePage';\nimport ModelForm from './pages/modelPage/ModelForm';\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect, BrowserRouter} from 'react-router-dom';\nimport ProcedeForm from './pages/procedePage/ProcedeForm';\nimport {Navbar, NavbarBrand, Container, Image, Nav, Button} from 'react-bootstrap';\nimport Logo from './assets/logo.png';\nimport NavbarToggle from 'react-bootstrap/esm/NavbarToggle';\nimport NavbarCollapse from 'react-bootstrap/esm/NavbarCollapse';\nimport StepForm from './pages/stepPage/StepForm';\nimport TestForm from './pages/testPage/TestForm';\nimport LoginForm from './pages/loginPage';\nimport ReactDOM from \"react-dom\";\n\nconst fetching = require('./encryption/fetching');\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {token: null};\n  }\n\n  componentDidMount() {\n    this.setState({token: localStorage.getItem('token') ? true : false});\n  }\n\n  componentWillUnmount() {\n  }\n\n  clearToken() {\n    localStorage.removeItem('token');\n    this.setState({token: false});\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Navbar id=\"navbar\" key=\"navbar\" fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Container>\n            <Image src={Logo} className=\"mx-2\" alt=\"KillerBee\" height=\"35\" />\n            <NavbarBrand as={Link} to={'/'}>KillerBee</NavbarBrand>\n            <NavbarToggle aria-controls=\"responsive-navbar-nav\" />\n            <NavbarCollapse className=\"justify-content-md-end\" id=\"responsive-navbar-nav\">\n              <Nav>\n                {\n                  this.state.token == null\n                    ? null\n                    : this.state.token == false\n                      ? <Button key=\"login\" as={Link} to={\"/login\"} variant=\"primary\">Connexion</Button>\n                      : [\n                        <NavbarBrand key=\"freezebee\" as={Link} to={'/freezebee'}>Freezebee</NavbarBrand>,\n                        <NavbarBrand key=\"procede\" as={Link} to={\"/procede\"}>Procédé</NavbarBrand>,\n                        <NavbarBrand key=\"ingredient\" as={Link} to={\"/ingredient\"}>Ingrédients</NavbarBrand>,\n                        <NavbarBrand key=\"etape\" as={Link} to={\"/etape\"}>Étapes</NavbarBrand>,\n                        <NavbarBrand key=\"test\" as={Link} to={\"/test\"}>Tests et validation</NavbarBrand>,\n                        <Button key=\"logout\" as={Link} onClick={() => this.clearToken()} to={'/'} variant=\"primary\">Déconnexion</Button>,\n                      ]\n                }\n              </Nav>\n            </NavbarCollapse>\n          </Container>\n        </Navbar>\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route key=\"loginRoute\" exact path='/login' component={LoginForm} />\n          <Route key=\"homeRoute\" exact path='/' component={HomePage} />\n          <Route key=\"ingredientRoute\" path='/ingredient' component={IngredientForm} />\n          <Route key=\"freezebeeRoute\" path='/freezebee' component={ModelForm} />\n          <Route key=\"procedeRoute\" path='/procede' component={ProcedeForm} />\n          <Route key=\"etapeRoute\" path='/etape' component={StepForm} />\n          <Route key=\"testRoute\" path='/test' component={TestForm} />\n          <Redirect to={'/'}></Redirect>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\encryption\\fetching.js",[],"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\homePage.js",["73","74","75"],"import { Component } from \"react\";\r\nimport {Image} from \"react-bootstrap\";\r\nimport killerbee from '../assets/killerbee.png';\r\nimport Background from '../assets/background-2.jpg';\r\nimport './homePage.css';\r\n\r\nclass HomePage extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"background-image\">\r\n                <h1 className=\"titre\">Bienvenue sur le site de KillerBee</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default HomePage;","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\modelPage\\ModelForm.js",[],"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\procedePage\\ProcedeForm.js",["76"],"import React, {Component} from 'react';\r\nimport '../../App.css';\r\nimport {Form, FormControl, FormGroup, FormLabel, Button, FormSelect, Table} from 'react-bootstrap';\r\n\r\nconst fetching = require('../../encryption/fetching');\r\n\r\nclass ProcedeForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {name: '', description: '', models: [], selectedModel: '', processes: []};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/Procede/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({processes: result.recordset});\r\n            } else console.error(err);\r\n        });\r\n        fetching.FetchAPI('localhost:8080', '/Modele/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({models: result.recordset, selectedModel: result.recordset[0].mod_ID});\r\n            } else console.error(err);\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(\r\n            {[event.target.name]: event.target.value}\r\n        );\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        let nom = this.state.name;\r\n        let description = this.state.description;\r\n        let modele = this.state.selectedModel;\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/Procede/Insert/', {nom: nom, description: description, modele: modele, token: token}, (err, result) => {\r\n            if (!err) {\r\n                window.location.reload(true);\r\n            } else console.error(err);\r\n        });\r\n        this.setState({name: '', description: '', selectedModel: ''});\r\n    }\r\n\r\n    renderModel(process) {\r\n        let models = this.state.models;\r\n        for (let i = 0; i < models.length; i++) {\r\n            if (models[i].mod_ID == process.mod_ID) return models[i].mod_nom;\r\n        }\r\n        return process.mod_ID;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"modelTable\">\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Nom</th>\r\n                                <th>Description</th>\r\n                                <th>Modèle</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.processes.map(process => (\r\n                                <tr key={process.pro_ID}>\r\n                                    <td>{process.pro_nom}</td>\r\n                                    <td>{process.pro_description}</td>\r\n                                    <td>{this.renderModel(process)}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n                <div className=\"form-display\">\r\n                    <h1>Ajouter un procédé</h1>\r\n                    <Form id=\"procedeForm\" onSubmit={this.handleSubmit}>\r\n                        <FormGroup className=\"mb-3\" controlId=\"name\">\r\n                            <FormLabel>\r\n                                Nom\r\n                            </FormLabel>\r\n                            <FormControl required type=\"text\" name=\"name\" placeholder=\"Nom du procédé\" value={this.state.name} onChange={this.handleChange}>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-3\" controlId=\"description\">\r\n                            <FormLabel>\r\n                                Description\r\n                            </FormLabel>\r\n                            <FormControl required type=\"text\" placeholder=\"Description du procédé\" name=\"description\" value={this.state.description} onChange={this.handleChange}>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className=\"mb-3\" controlId=\"selectedModel\">\r\n                            <FormLabel>\r\n                                Modèle\r\n                            </FormLabel>\r\n                            <FormSelect name=\"selectedModel\" value={this.state.selectedModel} onChange={this.handleChange}>\r\n                                {this.state.models.map(model => (\r\n                                    <option value={model.mod_ID} key={model.mod_ID}>\r\n                                        {model.mod_nom}\r\n                                    </option>\r\n                                )\r\n                                )}\r\n                            </FormSelect>\r\n                        </FormGroup>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Envoyer\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProcedeForm;","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\ingredientPage\\IngredientForm.js",[],"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\stepPage\\StepForm.js",[],"C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\testPage\\TestForm.js",["77"],"import React, {Component} from 'react';\r\nimport '../../App.css';\r\nimport { Form, FormControl, FormGroup, FormLabel, Button, FormSelect, Table } from 'react-bootstrap';\r\n\r\nconst fetching = require('../../encryption/fetching');\r\n\r\nclass TestForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {name: '', description: '', type: '', processes: [], selectedProcess: '', tests: []};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/Test/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({ tests: result.recordset });\r\n            } else console.error(err);\r\n        });\r\n        fetching.FetchAPI('localhost:8080', '/Procede/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({ processes: result.recordset, selectedProcess: result.recordset[0].pro_ID });\r\n            } else console.error(err);\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(\r\n            {[event.target.name] : event.target.value}\r\n        );\r\n      }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        let name = this.state.name;\r\n        let description = this.state.description;\r\n        let type = this.state.type;\r\n        let procede = this.state.selectedProcess;\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/Test/Insert/', {nom: name, description: description, type: type, procede: procede, token: token}, (err, result) => {\r\n            if (!err) {\r\n                window.location.reload(true);\r\n            } else console.error(err);\r\n        });\r\n        this.setState({name: '', description: '', type: '', selectedProcess: ''});\r\n    }\r\n\r\n    renderProcess(test) {\r\n        let processes = this.state.processes;\r\n        for (let i = 0; i < processes.length; i++) {\r\n            if (processes[i].pro_ID == test.pro_ID) return processes[i].pro_nom;\r\n        }\r\n        return test.pro_ID;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"modelTable\">\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Nom</th>\r\n                                <th>Description</th>\r\n                                <th>Type</th>\r\n                                <th>Procédé</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.tests.map(test => (\r\n                                <tr key={test.tes_ID}>\r\n                                    <td>{test.tes_nom}</td>\r\n                                    <td>{test.tes_description}</td>\r\n                                    <td>{test.tes_type}</td>\r\n                                    <td>{this.renderProcess(test)}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n                <div className=\"form-display\">\r\n                    <h1>Créer un test de validation</h1>\r\n                    <Form id=\"testForm\" onSubmit={this.handleSubmit}>\r\n                    <FormGroup className=\"mb-3\" controlId=\"name\">\r\n                        <FormLabel>\r\n                            Nom\r\n                        </FormLabel>\r\n                        <FormControl required type=\"text\" name=\"name\" placeholder=\"Nom du test\" value={this.state.name} onChange={this.handleChange}>\r\n                        </FormControl>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-3\" controlId=\"description\">\r\n                        <FormLabel>\r\n                            Description\r\n                        </FormLabel>\r\n                        <FormControl required type=\"text\" placeholder=\"Description du test\" name=\"description\" value={this.state.description} onChange={this.handleChange}>\r\n                        </FormControl>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-3\" controlId=\"type\">\r\n                        <FormLabel>\r\n                            Type\r\n                        </FormLabel>\r\n                        <FormControl required type=\"text\" placeholder=\"Type du test\" name=\"type\" value={this.state.type} onChange={this.handleChange}>\r\n                        </FormControl>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-3\" controlId=\"selectedProcess\">\r\n                        <FormLabel>\r\n                            Procédés\r\n                        </FormLabel>\r\n                        <FormSelect name=\"selectedProcess\" value={this.state.selectedProcess} onChange={this.handleChange}>\r\n                            {this.state.processes.map(process => (\r\n                                    <option value={process.pro_ID} key={process.pro_ID}>\r\n                                        {process.pro_nom}\r\n                                    </option>\r\n                                )\r\n                            )}\r\n                        </FormSelect>\r\n                    </FormGroup>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Envoyer\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default TestForm;","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\encryption\\encryption.js",["78","79","80","81","82","83","84"],"const NodeRSA = require('node-rsa');\r\n\r\nconst base64Map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\r\n\r\nString.prototype.replaceAt = function(index, replacement) {\r\n    return this.substr(0, index) + replacement + this.substr(index + replacement.length);\r\n}\r\n\r\n/**\r\n * Create the connection with the given options.\r\n * @param {bool} authorised \r\n * @param {RSA} privateKey \r\n * @param {RSA} publicKey \r\n * @param {RSA} connPublicKey \r\n * @returns new connection, null if the interlocutor already exists\r\n */\r\nfunction MakeConnection(authorised = true, privateKey = null, publicKey = null, connPublicKey = null) {\r\n    if (GetConnection()) DeleteConnection();\r\n    let conn = {\r\n        'interlocutor': 'API',\r\n        'authorised': authorised,\r\n        'privateKey': privateKey,\r\n        'publicKey': publicKey,\r\n        'connPublicKey': connPublicKey,\r\n    };\r\n    localStorage.setItem('connection', JSON.stringify(conn));\r\n    return conn;\r\n}\r\nfunction GetConnection() {\r\n    return JSON.parse(localStorage.getItem('connection'));\r\n}\r\nfunction SetConnection(conn) {\r\n    localStorage.setItem('connection', JSON.stringify(conn));\r\n}\r\nfunction DeleteConnection() {\r\n    let conn = GetConnection();\r\n    if (conn) localStorage.removeItem('connection')\r\n}\r\n\r\n// Content encoding\r\nfunction getRandomInt(start = 0, length = 1) {\r\n    return Math.floor(Math.random() * (length) + start);\r\n}\r\n/**\r\n * Randomly generate a set of keys.\r\n * @returns Set of keys to encode a message\r\n */\r\nfunction GenerateEncodingKey() {\r\n    let subKey = '', base64MapCopy = base64Map;\r\n    let transKey = [], polyAlphaKey = [], numberMap = [];\r\n    // substitution key generation using base 64 map\r\n    while (base64MapCopy.length > 0) {\r\n        let i = getRandomInt(0, base64MapCopy.length);\r\n        subKey += base64MapCopy[i];\r\n        base64MapCopy = base64MapCopy.substr(0, i) + base64MapCopy.substring(i + 1);\r\n    }\r\n    // number map generation\r\n    let transKeyLength = getRandomInt(20, 10);\r\n    for (let i = 0; i < transKeyLength; i++) {\r\n        numberMap.push(i);\r\n    }\r\n    // transposition key generation using number map\r\n    while (numberMap.length > 0) {\r\n        let i = getRandomInt(0, numberMap.length);\r\n        transKey.push(numberMap[i]);\r\n        numberMap.splice(i, 1);\r\n    }\r\n    // poly alpha key generation\r\n    let polyAlphaKeyLength = getRandomInt(16, 8);\r\n    for (let i = 0; i < polyAlphaKeyLength; i++) {\r\n        polyAlphaKey.push(getRandomInt(0, 26));\r\n    }\r\n    return {\r\n        'subKey': subKey,\r\n        'transKey': transKey,\r\n        'polyAlphaKey': polyAlphaKey,\r\n    };\r\n}\r\n/**\r\n * Encode a message with the given set of keys, using the custom sysmetric algorithm.\r\n * @param {String} toEncode The message to encode (base 64)\r\n * @param {Object} key Set of keys\r\n * @returns Encoded message\r\n */\r\nfunction Encode(toEncode, key) {\r\n    // substitution\r\n    for (let i = 0; i < toEncode.length; i++) {\r\n        let iMap = base64Map.indexOf(toEncode[i]);\r\n        if (iMap >= 0) toEncode = toEncode.replaceAt(i, key.subKey[iMap])\r\n    }\r\n    // transposition\r\n    while (toEncode.length % key.transKey.length != 0) toEncode += '*'\r\n    let transposed = toEncode\r\n    for (let i = 0; i < toEncode.length; i++) {\r\n        let iTrans = key.transKey[i % key.transKey.length] + key.transKey.length * Math.floor(i / key.transKey.length)\r\n        transposed = transposed.replaceAt(iTrans, toEncode[i])\r\n    }\r\n    toEncode = transposed;\r\n    // custom polyalpha substition\r\n    for (let i = 0; i < toEncode.length; i++) {\r\n        let iMap = base64Map.indexOf(toEncode[i]);\r\n        if (iMap >= 0) {\r\n            let iPoly = i % key.polyAlphaKey.length\r\n            iMap = (iMap + key.polyAlphaKey[iPoly]) % key.subKey.length\r\n            toEncode = toEncode.replaceAt(i, key.subKey[iMap])\r\n        }\r\n    }\r\n    // return encoded 'toEncode' string\r\n    return toEncode\r\n}\r\n/**\r\n * Decode a message with the given set of keys, using the custom sysmetric algorithm.\r\n * @param {String} encoded Encoded message to decode\r\n * @param {Object} key Set of keys\r\n * @returns Decoded message (base 64)\r\n */\r\nfunction Decode(encoded, key) {\r\n    // custom polyalpha substition\r\n    for (let i = 0; i < encoded.length; i++) {\r\n        let iMap = key.subKey.indexOf(encoded[i]);\r\n        if (iMap >= 0) {\r\n            let iPoly = i % key.polyAlphaKey.length\r\n            iMap = (iMap - key.polyAlphaKey[iPoly] + base64Map.length) % base64Map.length\r\n            encoded = encoded.replaceAt(i, base64Map[iMap])\r\n        }\r\n    }\r\n    // transposition\r\n    let transposed = encoded\r\n    for (let i = 0; i < encoded.length; i++) {\r\n        let iTrans = key.transKey[i % key.transKey.length] + key.transKey.length * Math.floor(i / key.transKey.length)\r\n        transposed = transposed.replaceAt(i, encoded[iTrans])\r\n    }\r\n    encoded = transposed;\r\n    while (encoded[encoded.length - 1] == '*') encoded = encoded.substr(0, encoded.length - 1)\r\n    // substitution\r\n    for (let i = 0; i < encoded.length; i++) {\r\n        let iMap = key.subKey.indexOf(encoded[i]);\r\n        if (iMap >= 0) encoded = encoded.replaceAt(i, base64Map[iMap])\r\n    }\r\n    // return decoded 'encoded' string\r\n    return encoded\r\n}\r\n\r\n// Encryption and communication\r\nmodule.exports.client = {\r\n    // AskConnection: function() {},\r\n\r\n    /**\r\n     * Initiate the connection with the server. Generate RSA keys pair to send the public one to the server.\r\n     * @param {function} callback (err, res) res: This public key\r\n     */\r\n    InitiateConnection: async function(callback) {\r\n        try {\r\n            let conn = MakeConnection();\r\n            if (conn) {\r\n                let privateRSA = new NodeRSA({b: 2048});\r\n                privateRSA.setOptions({encryptionScheme: 'pkcs1'});\r\n                privateRSA.generateKeyPair(2048);\r\n                conn.privateKey = privateRSA.exportKey('pkcs1');\r\n                conn.publicKey = privateRSA.exportKey('pkcs8-public');\r\n                SetConnection(conn);\r\n                callback(false, {'publicKey': conn.publicKey});\r\n            } else throw 'Unable to create the connection';\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Store the server's public key if the connection was accepted.\r\n     * @param {RSA} connPublicKey Server's public key\r\n     * @param {function} callback (err, res) res: true if the connection was accepted\r\n     */\r\n    ConnectionAccepted: async function(connPublicKey, callback) {\r\n        try {\r\n            let conn = GetConnection();\r\n            if (conn) {\r\n                conn.connPublicKey = connPublicKey;\r\n                SetConnection(conn);\r\n                callback(false, {'connection': true});\r\n            } else throw 'Unable to find the connection';\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Encode the message with a random key and encrypt the key to securely send them.\r\n     * @param {String} message The message to send\r\n     * @param {function} callback (err, res) res: {String: encodedMsg, Object: encryptedKey} Set composed of the encoded message and the encrypted key\r\n     */\r\n     EncryptForSending: async function(message, callback) {\r\n        try {\r\n            let conn = GetConnection();\r\n            if (conn) {\r\n                // Encoding key generation and encryption\r\n                let key = GenerateEncodingKey();\r\n                // let key64 = Buffer.from(JSON.stringify(key)).toString('base64');\r\n                let tempKey = new NodeRSA();\r\n                tempKey.setOptions({encryptionScheme: 'pkcs1'});\r\n                tempKey.importKey(conn.connPublicKey, 'pkcs8-public');\r\n                // let encryptedKey = tempKey.encrypt(key);\r\n                let encryptedKey = {\r\n                    'subKey': tempKey.encrypt(Buffer.from(key.subKey)),\r\n                    'transKey': tempKey.encrypt(Buffer.from(key.transKey)),\r\n                    'polyAlphaKey': tempKey.encrypt(Buffer.from(key.polyAlphaKey)),\r\n                };\r\n                // Message conversion to base 64 and encoding\r\n                let mes64 = Buffer.from(message).toString('base64');\r\n                let encodedMsg = Encode(mes64, key);\r\n\r\n                // Encoded message + Encrypted Key\r\n                callback(false, {\r\n                    'encodedMsg': encodedMsg,\r\n                    'encryptedKey': encryptedKey,\r\n                });\r\n            } else throw 'Unable to find the connection';\r\n        } catch (error) {\r\n            callback(error, null);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Decode the message with the decrypted key.\r\n     * @param {Object} encryptedMessage Set composed of the encoded message and the encrypted key\r\n     * @param {function} callback (err, res) res: The decoded message\r\n     */\r\n    DecryptReceived: async function(encryptedMessage, callback) {\r\n        try {\r\n            let conn = GetConnection();\r\n            if (conn) {\r\n                // Encoding key decryption\r\n                // let decryptedKey = conn.privateKey.decrypt(encryptedMessage.encryptedKey);\r\n                let tempKey = new NodeRSA();\r\n                tempKey.setOptions({encryptionScheme: 'pkcs1'});\r\n                tempKey.importKey(conn.privateKey, 'pkcs1');\r\n                let decryptedKey = {\r\n                    'subKey': tempKey.decrypt(Buffer.from(encryptedMessage.encryptedKey.subKey)).toString(),\r\n                    'transKey': Array.from(tempKey.decrypt(Buffer.from(encryptedMessage.encryptedKey.transKey))),\r\n                    'polyAlphaKey': Array.from(tempKey.decrypt(Buffer.from(encryptedMessage.encryptedKey.polyAlphaKey))),\r\n                };\r\n                // Message decoding\r\n                let decodedMsg64 = Decode(encryptedMessage.encodedMsg, decryptedKey);\r\n                let decodedMsg = Buffer.from(decodedMsg64, 'base64').toString('ascii');\r\n\r\n                // Message conversion from base 64\r\n                callback(false, decodedMsg);\r\n            } else throw 'Unable to find the connection';\r\n        } catch (error) {\r\n            console.error(error);\r\n            callback(error, null);\r\n        }\r\n    },\r\n};\r\n","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\ingredientPage\\IngredientToModelForm.js",["85"],"import React, {Component} from 'react';\r\nimport '../../App.css';\r\nimport {Button, FormLabel, FormControl, Form, FormGroup, FormSelect, Modal} from 'react-bootstrap';\r\n\r\nconst fetching = require('../../encryption/fetching');\r\n\r\nclass IngredientToModelForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {models: [], selectedModel: '', ingredients: [], selectedIngredient: '', grammage: 0};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    onClose = e => {\r\n        this.props.onClose && this.props.onClose(e);\r\n    };\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/Ingredient/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({ingredients: result.recordset, selectedIngredient: result.recordset[0].ing_ID});\r\n            } else console.error(err);\r\n        });\r\n        fetching.FetchAPI('localhost:8080', '/Modele/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({models: result.recordset, selectedModel: result.recordset[0].mod_ID});\r\n            } else console.error(err);\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(\r\n            {[event.target.name]: event.target.value}\r\n        );\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        let modele = this.state.selectedModel;\r\n        let ingredient = this.state.selectedIngredient;\r\n        let grammage = this.state.grammage;\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/IngredientModele/Insert/', {modele: modele, ingredient: ingredient, grammage: grammage, token: token}, (err, result) => {\r\n            if (!err) {\r\n                window.location.reload(true);\r\n            } else console.error(err);\r\n        });\r\n        this.setState({selectedModel: '', selectedIngredient: '', grammage: 0});\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.show) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"form-display\">\r\n                    <h1>Ajouter un ingrédient à un modèle</h1>\r\n                    <Form id=\"ingredientForm\" onSubmit={this.handleSubmit}>\r\n                        <FormGroup className=\"mb-3\" controlId=\"selectedModel\">\r\n                            <FormLabel>\r\n                                Modèle\r\n                            </FormLabel>\r\n                            <FormSelect name=\"selectedModel\" value={this.state.selectedModel} onChange={this.handleChange}>\r\n                                {this.state.models.map(model => (\r\n                                    <option value={model.mod_ID} key={model.mod_ID}>\r\n                                        {model.mod_nom}\r\n                                    </option>\r\n                                )\r\n                                )}\r\n                            </FormSelect>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-3\" controlId=\"selectedIngredient\">\r\n                            <FormLabel>\r\n                                Ingredients\r\n                            </FormLabel>\r\n                            <FormSelect name=\"selectedIngredient\" value={this.state.selectedIngredient} onChange={this.handleChange}>\r\n                                {this.state.ingredients.map(ingredient => (\r\n                                    <option value={ingredient.ing_ID} key={ingredient.ing_ID}>\r\n                                        {ingredient.ing_nom}\r\n                                    </option>\r\n                                )\r\n                                )}\r\n                            </FormSelect>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-3\" controlId=\"grammage\">\r\n                            <FormLabel>\r\n                                Grammage\r\n                            </FormLabel>\r\n                            <FormControl pattern=\"[0-9]\" required type=\"number\" min=\"0\" placeholder=\"Grammage du freezebee\" name=\"grammage\" value={this.state.grammage} onChange={this.handleChange}>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Envoyer\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IngredientToModelForm;","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\loginPage.js",["86","87"],"import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport HomePage from '../pages/homePage';\r\nimport {Button, FormLabel, FormControl, Form, FormGroup} from 'react-bootstrap';\r\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect} from 'react-router-dom';\r\nimport App from '../App';\r\nimport { sha256 } from 'js-sha256';\r\n\r\nconst fetching = require('../encryption/fetching');\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {error: null, username: '', password: '', auth: false};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(\r\n            {[event.target.name]: event.target.value}\r\n        );\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        fetching.CreateConnection('localhost:8080', '/Connection/Request/', (err, result) => {\r\n            if (!err) {\r\n                fetching.FetchAPI('localhost:8080', '/LogIn/', {nom: this.state.username, mdp: sha256(this.state.password)}, (err, result) => {\r\n                    if (!err) {\r\n                        localStorage.setItem('token', result.token);\r\n                        this.setState({auth: true, erreur: null});\r\n                        window.location.reload(true);\r\n                    } else {\r\n                        this.setState({erreur: err});\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({erreur: err});\r\n            }\r\n        });\r\n    }\r\n\r\n    /*\r\n    addTokenIntoCache = (cacheName, url, response) => {\r\n        const data = new Response(JSON.stringify(response));\r\n\r\n        if ('caches' in window) {\r\n            caches.open(cacheName).then((cache) => {\r\n                cache.put(url, data);\r\n            });\r\n        }\r\n    }\r\n    */\r\n\r\n    render() {\r\n        if (this.state.auth) {\r\n            return (\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path='/' component={App} />\r\n                        <Redirect to={'/'}></Redirect>\r\n                    </Switch>\r\n                </Router>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"h-100 d-flex\">\r\n                    <div className=\"form-display\">\r\n                        <Form id=\"loginForm\" onSubmit={this.handleSubmit}>\r\n                            <FormGroup className=\"mb-3\" controlId=\"username\">\r\n                                <FormLabel>\r\n                                    Nom d'utilisateur\r\n                                </FormLabel>\r\n                                <FormControl required type=\"text\" placeholder=\"Utilisateur\" name=\"username\" value={this.state.username} onChange={this.handleChange}>\r\n                                </FormControl>\r\n                            </FormGroup>\r\n                            <FormGroup className=\"mb-3\" controlId=\"password\">\r\n                                <FormLabel>\r\n                                    Mot de passe\r\n                                </FormLabel>\r\n                                <FormControl required type=\"password\" placeholder=\"Mot de passe\" name=\"password\" value={this.state.password} onChange={this.handleChange}>\r\n                                </FormControl>\r\n                            </FormGroup>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Envoyer\r\n                            </Button>\r\n                        </Form>\r\n                        <div style= {{'visibility' : this.state.erreur ? 'visible' : 'hidden'}}>Erreur : {this.state.erreur}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default LoginForm;","C:\\Users\\vince\\OneDrive\\Documents\\A5 - Option 1\\cybersecurite\\freezebee\\src\\pages\\stepPage\\StepToProcede.js",["88"],"import React, {Component} from 'react';\r\nimport '../../App.css';\r\nimport {Button, FormLabel, FormControl, Form, FormGroup, FormSelect, Modal} from 'react-bootstrap';\r\n\r\nconst fetching = require('../../encryption/fetching');\r\n\r\nclass StepToProcedeForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {processes: [], selectedProcess: '', steps: [], selectedStep: '', order: 0};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    onClose = e => {\r\n        this.props.onClose && this.props.onClose(e);\r\n    };\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/Procede/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({processes: result.recordset, selectedProcess: result.recordset[0].pro_ID});\r\n            } else console.error(err);\r\n        });\r\n        fetching.FetchAPI('localhost:8080', '/Etape/Select/', {token: token}, (err, result) => {\r\n            if (!err) {\r\n                this.setState({steps: result.recordset, selectedStep: result.recordset[0].eta_ID});\r\n            } else console.error(err);\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState(\r\n            {[event.target.name]: event.target.value}\r\n        );\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        let procede = this.state.selectedProcess;\r\n        let etape = this.state.selectedStep;\r\n        let ordre = this.state.order;\r\n        let token = localStorage.getItem('token');\r\n        fetching.FetchAPI('localhost:8080', '/EtapeProcede/Insert/', {procede: procede, etape: etape, ordre: ordre, token: token}, (err, result) => {\r\n            if (!err) {\r\n                window.location.reload(true);\r\n            } else console.error(err);\r\n        });\r\n        this.setState({selectedProcess: '', selectedStep: '', ordre: 0});\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.show) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"form-display\">\r\n                    <h1>Ajouter une étape à un procédé</h1>\r\n                    <Form id=\"steptoprocessForm\" onSubmit={this.handleSubmit}>\r\n                        <FormGroup className=\"mb-3\" controlId=\"selectedProcess\">\r\n                            <FormLabel>\r\n                                Procédé\r\n                            </FormLabel>\r\n                            <FormSelect name=\"selectedProcess\" value={this.state.selectedProcess} onChange={this.handleChange}>\r\n                                {this.state.processes.map(process => (\r\n                                    <option value={process.pro_ID} key={process.pro_ID}>\r\n                                        {process.pro_nom}\r\n                                    </option>\r\n                                )\r\n                                )}\r\n                            </FormSelect>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-3\" controlId=\"selectedStep\">\r\n                            <FormLabel>\r\n                                Étape\r\n                            </FormLabel>\r\n                            <FormSelect name=\"selectedStep\" value={this.state.selectedStep} onChange={this.handleChange}>\r\n                                {this.state.steps.map(step => (\r\n                                    <option value={step.eta_ID} key={step.eta_ID}>\r\n                                        {step.eta_nom}\r\n                                    </option>\r\n                                )\r\n                                )}\r\n                            </FormSelect>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-3\" controlId=\"order\">\r\n                            <FormLabel>\r\n                                Ordre\r\n                            </FormLabel>\r\n                            <FormControl pattern=\"[0-9]\" required type=\"number\" min=\"0\" placeholder=\"Ordre de l'étape\" name=\"order\" value={this.state.order} onChange={this.handleChange}>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Envoyer\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default StepToProcedeForm;",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":6,"column":26,"nodeType":"95","messageId":"96","endLine":6,"endColumn":32},{"ruleId":"93","severity":1,"message":"97","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":16},{"ruleId":"93","severity":1,"message":"98","line":17,"column":7,"nodeType":"95","messageId":"96","endLine":17,"endColumn":15},{"ruleId":"99","severity":1,"message":"100","line":51,"column":40,"nodeType":"101","messageId":"102","endLine":51,"endColumn":42},{"ruleId":"93","severity":1,"message":"103","line":2,"column":9,"nodeType":"95","messageId":"96","endLine":2,"endColumn":14},{"ruleId":"93","severity":1,"message":"104","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":17},{"ruleId":"93","severity":1,"message":"105","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":53,"column":34,"nodeType":"101","messageId":"102","endLine":53,"endColumn":36},{"ruleId":"99","severity":1,"message":"100","line":54,"column":37,"nodeType":"101","messageId":"102","endLine":54,"endColumn":39},{"ruleId":"106","severity":1,"message":"107","line":5,"column":1,"nodeType":"108","messageId":"102","endLine":7,"endColumn":2},{"ruleId":"99","severity":1,"message":"109","line":92,"column":50,"nodeType":"101","messageId":"102","endLine":92,"endColumn":52},{"ruleId":"99","severity":1,"message":"100","line":134,"column":40,"nodeType":"101","messageId":"102","endLine":134,"endColumn":42},{"ruleId":"110","severity":1,"message":"111","line":163,"column":20,"nodeType":"112","messageId":"113","endLine":163,"endColumn":60},{"ruleId":"110","severity":1,"message":"111","line":181,"column":20,"nodeType":"112","messageId":"113","endLine":181,"endColumn":58},{"ruleId":"110","severity":1,"message":"111","line":217,"column":20,"nodeType":"112","messageId":"113","endLine":217,"endColumn":58},{"ruleId":"110","severity":1,"message":"111","line":248,"column":20,"nodeType":"112","messageId":"113","endLine":248,"endColumn":58},{"ruleId":"93","severity":1,"message":"114","line":3,"column":70,"nodeType":"95","messageId":"96","endLine":3,"endColumn":75},{"ruleId":"93","severity":1,"message":"115","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":16},{"ruleId":"93","severity":1,"message":"116","line":5,"column":49,"nodeType":"95","messageId":"96","endLine":5,"endColumn":53},{"ruleId":"93","severity":1,"message":"114","line":3,"column":70,"nodeType":"95","messageId":"96","endLine":3,"endColumn":75},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'fetching' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Image' is defined but never used.","'killerbee' is defined but never used.","'Background' is defined but never used.","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","Expected '!==' and instead saw '!='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'Modal' is defined but never used.","'HomePage' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]